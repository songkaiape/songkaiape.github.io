<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Inspiration</title>
  <subtitle>Never underestimate your power to change yourself!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://songkaiape.github.io/"/>
  <updated>2016-03-03T02:05:22.884Z</updated>
  <id>http://songkaiape.github.io/</id>
  
  <author>
    <name>songkaiape</name>
    <email>songkaiape@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LongestPalindrome</title>
    <link href="http://songkaiape.github.io/2016/03/02/LongestPalindrome/"/>
    <id>http://songkaiape.github.io/2016/03/02/LongestPalindrome/</id>
    <published>2016-03-02T10:03:11.000Z</published>
    <updated>2016-03-03T02:05:22.884Z</updated>
    
    <content type="html">&lt;p&gt;详细介绍了几种最长回文字符串的算法,并且用Python实现&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;最长回文字符子串的解法-python版&quot;&gt;&lt;a href=&quot;#最长回文字符子串的解法-python版&quot; class=&quot;headerlink&quot; title=&quot;最长回文字符子串的解法(python版)&quot;&gt;&lt;/a&gt;最长回文字符子串的解法(python版)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;问题描述：求一个字符串S的最长回文字符子串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个有趣的问题已经被著名的Greplin 编程挑战收录，并且是一个经常在面试中被问到的问题。之所以这么出名，因为这个问题可以有很多种解法。就我知道的就有5种完全不同的解法。准备好迎接挑战了么~？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：&lt;br&gt;首先你得清楚的了解什么是回文字符串。回文字符串就是是一个正反读起来都是一样的字符串。例如，”aba”就是回文字符串，”abc”则不是&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一个常见的错误&quot;&gt;&lt;a href=&quot;#一个常见的错误&quot; class=&quot;headerlink&quot; title=&quot;一个常见的错误&quot;&gt;&lt;/a&gt;一个常见的错误&lt;/h1&gt;&lt;p&gt;有些人可能会想到下面这样一个快速的解法，但是很不幸的是它是错误的（但是还是可以在此基础上进行修改的）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把字符串S反转变成S’。找到二者的最长公共子串，那就是最长回文子串。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看起来这个解法似乎是对的，下面我们用实际的例子来看看吧。&lt;/p&gt;
&lt;p&gt;例如：S=”caba” S’=”abac”&lt;br&gt;最长公共子串是”aba”，也是正确的答案&lt;/p&gt;
&lt;p&gt;让我们试试另一个例子：&lt;br&gt;S=”abacdfgdcaba” S’=”abacdgfdcaba”&lt;br&gt;最长公共子串则是”abacd”.很明显，这并不是一个回文子串，也就不是正确的解。&lt;/p&gt;
&lt;p&gt;我们可以发现上面的方法当字符存在一个非回文，反转的字符子串在S的其他部分时会出错。为了更正这个问题，每次我们找到一个最长公共子串，我们需要检查这个子串是不是回文子串。如果是，我们就记录下这个回文子串，否则就跳过它继续寻找。&lt;/p&gt;
&lt;p&gt;这给了我们一个: &lt;img src=&quot;https://camo.githubusercontent.com/0a0148f0e8f80a4da0b8148fa601714b38d690cc/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f244f284e253545253742322537442924&quot; alt=&quot;o2&quot;&gt;的DP算法，使用空间是: &lt;img src=&quot;https://camo.githubusercontent.com/0a0148f0e8f80a4da0b8148fa601714b38d690cc/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f244f284e253545253742322537442924&quot; alt=&quot;o2&quot;&gt;.&lt;/p&gt;
&lt;h1 id=&quot;暴力解决法——：&quot;&gt;&lt;a href=&quot;#暴力解决法——：&quot; class=&quot;headerlink&quot; title=&quot;暴力解决法——：&quot;&gt;&lt;/a&gt;暴力解决法——&lt;img src=&quot;https://camo.githubusercontent.com/661f17b4875a4b63877948a8b10c64d910665808/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f244f284e253545253742332537442924&quot; alt=&quot;&quot;&gt;：&lt;/h1&gt;&lt;p&gt;最简单的暴力解决办法就是找到所有可能的字符子串然后确定它是不是回文字符串。总共有C(n,2)种字符子串(除了单个字符的字符串)&lt;/p&gt;
&lt;p&gt;由于判断每个子串需要O(N)时间，这个算法的时间复杂度就是&lt;img src=&quot;https://camo.githubusercontent.com/661f17b4875a4b63877948a8b10c64d910665808/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f244f284e253545253742332537442924&quot; alt=&quot;&quot;&gt;.&lt;/p&gt;
&lt;h1 id=&quot;动态规划解法，时间和空间&quot;&gt;&lt;a href=&quot;#动态规划解法，时间和空间&quot; class=&quot;headerlink&quot; title=&quot;动态规划解法，时间和空间&quot;&gt;&lt;/a&gt;动态规划解法，&lt;img src=&quot;https://camo.githubusercontent.com/0a0148f0e8f80a4da0b8148fa601714b38d690cc/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f244f284e253545253742322537442924&quot; alt=&quot;&quot;&gt;时间和&lt;img src=&quot;https://camo.githubusercontent.com/0a0148f0e8f80a4da0b8148fa601714b38d690cc/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f244f284e253545253742322537442924&quot; alt=&quot;&quot;&gt;空间&lt;/h1&gt;&lt;p&gt;为了获得明显提示，我们需要尽量避免在判断回文子串中不必要的重复计算。比如，”ababa”如果我们已经知道”bab”是一个回文字符串，明显的”ababa”一定是个回文字符串因为最左最右的字符是一样的。&lt;/p&gt;
&lt;p&gt;更精确的描述如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;P[i,j]=true 表示字符子串S[i…j]是否是回文子串&lt;/li&gt;
&lt;li&gt;初始化：P[i,i]=true(0&amp;lt;=i&amp;lt;=n-1) P[i,i-1]=true(1&amp;lt;=i&amp;lt;=n-1)&lt;/li&gt;
&lt;li&gt;P[i,j]=(P[i+1,j-1] and S[i]=S[j])&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;在动态规划中保存最长回文长度和起点即可：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;longestPalindromeDP&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#st=time.time()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n=len(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n&amp;lt;=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mylist=[([&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]*n) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(n)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#生成N*N数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left,right=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mylist[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(n):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mylist[i][i],mylist[i][i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#初始化数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#枚举子串长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(n-k):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;#枚举子串起始位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s[i]==s[i+k-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; mylist[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][i+k-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mylist[i][i+k-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; right-left+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; k:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    left = i &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    right = i+k-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#print(time.time()-st)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s[left:right+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;简单的中心扩展方法时间和O-1-空间&quot;&gt;&lt;a href=&quot;#简单的中心扩展方法时间和O-1-空间&quot; class=&quot;headerlink&quot; title=&quot;简单的中心扩展方法时间和O(1)空间&quot;&gt;&lt;/a&gt;简单的中心扩展方法&lt;img src=&quot;https://camo.githubusercontent.com/0a0148f0e8f80a4da0b8148fa601714b38d690cc/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f244f284e253545253742322537442924&quot; alt=&quot;&quot;&gt;时间和O(1)空间&lt;/h1&gt;&lt;p&gt;我们可以观察到回文字符串是中心对称的，因此，一个回文字符串可以从它的中心向外扩展，一共只有2N-1个这样的中心。&lt;/p&gt;
&lt;p&gt;你可能会问为什么是2N-1个而不是N个，原因是偶数回文的字符中心是在2个字符之间的，例如”abba”这个字符串的中心是在两个’b’之间的。&lt;/p&gt;
&lt;p&gt;因为扩展一个回文字符串需要花费O(N)的时间，总共的时间复杂度就是&lt;img src=&quot;https://camo.githubusercontent.com/0a0148f0e8f80a4da0b8148fa601714b38d690cc/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f244f284e253545253742322537442924&quot; alt=&quot;&quot;&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#st=time.time()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    l=len(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; l&amp;lt;=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start=maxlen=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(l):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        low,high=i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; low&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; high&amp;lt;l &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; s[low]==s[high]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#遍历偶数字符的子串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            low-=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            high+=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; high-low-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;maxlen:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxlen=high-low-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            start=low+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        low,high=i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; low &amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; high&amp;lt;l &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; s[low]==s[high]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#遍历奇数字符的子串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            low-=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            high+=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; high-low-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;maxlen:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxlen=high-low-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            start=low+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#print(time.time()-st)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s[start:maxlen+start]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;一个O-N-的解法-Manacher算法&quot;&gt;&lt;a href=&quot;#一个O-N-的解法-Manacher算法&quot; class=&quot;headerlink&quot; title=&quot;一个O(N)的解法(Manacher算法)&quot;&gt;&lt;/a&gt;一个O(N)的解法(Manacher算法)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这是一个不可思议的解法，完全不能想象还有这种解法，这大概就是算法之美吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先我们对字符串S做如下处理，在S相邻字符之间插入’#’。这么做的原因你很快就会知道。&lt;/p&gt;
&lt;p&gt;例如：S=”abaaba”, T=”#a#b#a#a#b#a#”&lt;/p&gt;
&lt;p&gt;为了找到最长回文子串，我们需要扩展每个T[i],比如T[i-d]到T[i+d]就构成一个回文字符串。你应该会马上发现d就是中心在T[i]的回文字符串长度&lt;/p&gt;
&lt;p&gt;我们把结果存在P数组中，P[i]代表了以T[i]为中心的回文字符串长度。最长回文字符子串就是P中最大的元素。&lt;/p&gt;
&lt;p&gt;用上面的例子我们可以得到下面的结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T = # a # b # a # a # b # a #&lt;/li&gt;
&lt;li&gt;P = 0 1 0 3 0 1 6 1 0 3 0 1 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;观察P数组我们可以马上得到最长子串是”abaaba”，因为P[6]=6&lt;/p&gt;
&lt;p&gt;现在你应该注意到了我们插入的’#’字符的作用了，无论是奇数还是偶数个的回文字符串都可以按照奇数来处理了。&lt;/p&gt;
&lt;p&gt;现在我们应该尝试一个更加复杂的例子了：&lt;br&gt;S=”babcbabcbaccba”&lt;br&gt;&lt;img src=&quot;http://articles.leetcode.com/wp-content/uploads/2011/11/palindrome_table10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面图片是经过处理之后的S，竖线C表示”abcbabcba”的中心。虚线L和R表示它的边缘。你现在所在位置是i，他关于C的镜像是i’。现在考虑下怎么样有效的计算P[i]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假定我们已经到了i=13这个点，并且我们需要计算P[13]。我们可以看见i关于C的镜像i’的下标是9.&lt;br&gt;&lt;img src=&quot;http://articles.leetcode.com/wp-content/uploads/2011/11/palindrome_table11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;你可以从上图发现，P[i]=P[i’]=1,这揭示了回文字符串中心对称的一个属性。事实上，C后面3个字符都是对称的，P[12]=P[10]=0,P[13]=[9]=1,P[14]=P[8]=0&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://articles.leetcode.com/wp-content/uploads/2011/11/palindrome_table4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在我们到了i=15的位置，P[i]的值又是多少呢？如果我们按照对称的属性，P[i]的值应该等于P[i’]=7。但是明显这是不对的，我们以T[15]为中心向2边扩展，得到的回文字符串是”a#b#c#b#a”，比我们实际期望的要小，这是为什么呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://articles.leetcode.com/wp-content/uploads/2011/11/palindrome_table5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;绿线覆盖的2区域明显的是匹配的。穿过中心区域的部分一定也是对称的。这里请注意P[i’]是7因为它可以扩展超出L边缘（红线区域，这导致了它不再拥有我们推想的对称属性了）我们知道P[i]&amp;gt;=5，为了计算P[i]的值我们需要继续向两边匹配字符。在这个例子里，因为P[21]≠P[1],所以P[i]=5&lt;/p&gt;
&lt;p&gt;现在我们来总结一下这个算法的核心部分：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;if P[i’]&amp;lt;=R-i&lt;br&gt;then P[i]=P[i’]&lt;br&gt;else P[i]&amp;gt;=P&lt;a href=&quot;这意味着我们必须向右扩展来计算P[i]&quot;&gt;i’&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最好一部分是确定什么时候我们需要把C和R向右移动：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果回文中心在i需要扩展超过R,我们把C更新到i(新的回文中心)并且把R扩展到新的回文右边界。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#Manacher algorithm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#http://en.wikipedia.org/wiki/Longest_palindromic_substring&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, s)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Transform S into T.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# For example, S = &quot;abba&quot;, T = &quot;^#a#b#b#a#$&quot;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# ^ and $ signs are sentinels appended to each end to avoid bounds checking&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        T = &lt;span class=&quot;string&quot;&gt;&#39;#&#39;&lt;/span&gt;.join(&lt;span class=&quot;string&quot;&gt;&#39;^&amp;#123;&amp;#125;$&#39;&lt;/span&gt;.format(s))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n = len(T)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] * n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        C = R = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            P[i] = (R &amp;gt; i) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; min(R - i, P[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*C - i]) &lt;span class=&quot;comment&quot;&gt;# equals to i&#39; = C - (i-C)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# Attempt to expand palindrome centered at i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; T[i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + P[i]] == T[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - P[i]]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                P[i] += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# If palindrome centered at i expand past R,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# adjust center based on expanded palindrome.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i + P[i] &amp;gt; R:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                C, R = i, i + P[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Find the maximum element in P.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxLen, centerIndex = max((n, i) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, n &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(P))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s[(centerIndex  - maxLen)//&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: (centerIndex  + maxLen)//&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h1&gt;&lt;p&gt;最近开始刷leetcode来熟悉python语法，作为一个算法苦手简直是被虐的心疼。不过接触了解了更多算法的原理，这篇文章主要是翻译了leetcode上面的一篇文章，并且把算法都改为Python实现了。翻译的不是很信达雅，有问题的同学可以移步原帖。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/suool/article/details/38383045&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/suool/article/details/38383045&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://articles.leetcode.com/longest-palindromic-substring-part-ii&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://articles.leetcode.com/longest-palindromic-substring-part-ii&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://articles.leetcode.com/longest-palindromic-substring-part-i&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://articles.leetcode.com/longest-palindromic-substring-part-i&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      详细介绍了几种最长回文字符串的算法，并且用Python实现
    
    </summary>
    
      <category term="技术相关" scheme="http://songkaiape.github.io/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="python" scheme="http://songkaiape.github.io/tags/python/"/>
    
      <category term="算法" scheme="http://songkaiape.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="http://songkaiape.github.io/2016/02/16/markdown/"/>
    <id>http://songkaiape.github.io/2016/02/16/markdown/</id>
    <published>2016-02-16T01:48:11.000Z</published>
    <updated>2016-03-03T01:37:59.862Z</updated>
    
    <content type="html">&lt;p&gt;学习markdown笔记，一些常用语法，分享给大家&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Markdown简介&quot;&gt;&lt;a href=&quot;#Markdown简介&quot; class=&quot;headerlink&quot; title=&quot;Markdown简介&quot;&gt;&lt;/a&gt;Markdown简介&lt;/h1&gt;&lt;p&gt;Markdown是由Jonh Gruber创建的一种轻量级的标记语言,目标是实现「易读易写」。它让人们能够以纯文本格式来编写文档，然后转换成html 文档。因为易读易写的特性，在写博客的人群中大受欢迎。&lt;/p&gt;
&lt;p&gt;#Markdown编辑器&lt;br&gt;推荐以下几种Markdown编辑器：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Mac: Mou、Byword&lt;/li&gt;
&lt;li&gt;Windows: Sublime Text+Markdown 插件 、MarkdownPad&lt;/li&gt;
&lt;li&gt;Linux: Retext&lt;/li&gt;
&lt;li&gt;在线编辑器：&lt;a href=&quot;http://jianshu.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;,&lt;a href=&quot;https://stackedit.io/editor#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackedit&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Markdown常用语法&quot;&gt;&lt;a href=&quot;#Markdown常用语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown常用语法&quot;&gt;&lt;/a&gt;Markdown常用语法&lt;/h1&gt;&lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h1&gt;&lt;p&gt;Markdown标题支持类 Setext 和类 atx 形式。&lt;br&gt;类Setext使用底线的格式，利用&lt;em&gt;=&lt;/em&gt;(最高阶标题)和&lt;em&gt;-&lt;/em&gt;(第二阶标题)，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is an H1
=======
This is an H2
------------
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;任意数量的&lt;em&gt;=&lt;/em&gt;和&lt;em&gt;-&lt;/em&gt;都有效果&lt;br&gt;类Atx的形式则是在行首插入1到6个&lt;em&gt;#&lt;/em&gt;，对应标题1到6阶，例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#&amp;#36825;&amp;#26159; H1&amp;#10;##&amp;#36825;&amp;#26159; H2&amp;#10;##### &amp;#36825;&amp;#26159;H5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;区块引用&quot;&gt;&lt;a href=&quot;#区块引用&quot; class=&quot;headerlink&quot; title=&quot;区块引用&quot;&gt;&lt;/a&gt;区块引用&lt;/h1&gt;&lt;p&gt;Markdown 标记区块引用是使用类似email的方式，在每行头部加上&lt;em&gt;&amp;gt;&lt;/em&gt;，当然你也可以偷懒只在区块的第一行添加。区块引用也可以嵌套&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#62;This is a paragraph&amp;#10;&amp;#62;hello world&amp;#10;&amp;#62;&amp;#62;hello world    &amp;#23884;&amp;#22871;&amp;#20351;&amp;#29992;&amp;#10;&amp;#62;&amp;#10;&amp;#62;hello world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h1&gt;&lt;p&gt;Markdown 支持有序列表和无序列表。&lt;br&gt;无序列表使用星号、加号或是减号作为列表标记：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;*  red&amp;#10;*  blue&amp;#10;*  yellow&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有序列表使用数字接着一个英文句点：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.  Bird&amp;#10;2.  Fish&amp;#10;3.  Dragon&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;代码区块&quot;&gt;&lt;a href=&quot;#代码区块&quot; class=&quot;headerlink&quot; title=&quot;代码区块&quot;&gt;&lt;/a&gt;代码区块&lt;/h1&gt;&lt;p&gt;建立代码区块只需要简单的缩进4个空格或者一个制表符就可以。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这是一个普通段落。
    这是一个代码区块
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以使用三个`在代码块开始结束位置来标志，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(gt)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;hello,world&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;分割线&quot;&gt;&lt;a href=&quot;#分割线&quot; class=&quot;headerlink&quot; title=&quot;分割线&quot;&gt;&lt;/a&gt;分割线&lt;/h1&gt;&lt;p&gt;使用3个以上的星号,减号，或者底线就可以实现：&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;***
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如上所示但是分割线行内不能出现除空格符以上三种字符以外其他字符&lt;/p&gt;
&lt;h1 id=&quot;超链接&quot;&gt;&lt;a href=&quot;#超链接&quot; class=&quot;headerlink&quot; title=&quot;超链接&quot;&gt;&lt;/a&gt;超链接&lt;/h1&gt;&lt;p&gt;Markdown支持两种形式的链接语法：&lt;strong&gt;行内式&lt;/strong&gt;和&lt;strong&gt;参考式&lt;/strong&gt;。&lt;br&gt;两种都使用[方括号]来标记链接文字。&lt;br&gt;&lt;strong&gt;行内式&lt;/strong&gt;只需要在方括号后面紧跟着圆括号并且插入链接网址即可，如果希望加入链接的title文字，只需要网址后面用双引号把title文字包含起来。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is [a link](http://google.com/&amp;quot;title&amp;quot;) inline link.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以使用相对路径：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is [about](/about/) page
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;参考式&lt;/strong&gt;链接是在链接文字接上另一个方括号，而在第二个方括号里面要填入用以辨识的链接的标记:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is [my website][Inspiration]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后你可以在任意位置把这个标记的链接内容定义出来&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Inspiration]: http://songkaiape.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;强调&quot;&gt;&lt;a href=&quot;#强调&quot; class=&quot;headerlink&quot; title=&quot;强调&quot;&gt;&lt;/a&gt;强调&lt;/h1&gt;&lt;p&gt;Markdown使用*和_表示强调&lt;br&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;单星号 = *斜体*
单下划线 = _斜体_
双星号 = **加粗**
双下划线 = __加粗__
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;图片&quot;&gt;&lt;a href=&quot;#图片&quot; class=&quot;headerlink&quot; title=&quot;图片&quot;&gt;&lt;/a&gt;图片&lt;/h1&gt;&lt;p&gt;图片使用方法和链接类似，只需要在中括号前面加&lt;strong&gt;叹号&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;markdown 语法不能设置图片大小，如果必须设置则应该使用HTML标记&amp;lt; img&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;行内式：！[文本]（/img/background.jpg &amp;quot;title&amp;quot;）
参考式：！[文本][pic]
[pic]：/img/1.jpg &amp;quot;title&amp;quot;
HTML：&amp;lt;img src=&amp;quot;/img/1.jpg&amp;quot; alt=&amp;quot;文本&amp;quot; title=&amp;quot;标题文本&amp;quot; width=&amp;quot;200&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h1&gt;&lt;p&gt;Markdown语法因为编辑器的不同可能会有些细微差别，使用时请注意多多查询。&lt;/p&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://equation85.github.io/blog/markdown-examples/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://equation85.github.io/blog/markdown-examples/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://wowubuntu.com/markdown/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wowubuntu.com/markdown/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://snails.github.io/2012/05/08/Learn-to-Markdown/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://snails.github.io/2012/05/08/Learn-to-Markdown/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      学习markdown笔记，一些常用语法.
    
    </summary>
    
      <category term="技术相关" scheme="http://songkaiape.github.io/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="markdown" scheme="http://songkaiape.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://songkaiape.github.io/2016/02/14/hello-world/"/>
    <id>http://songkaiape.github.io/2016/02/14/hello-world/</id>
    <published>2016-02-14T03:11:11.000Z</published>
    <updated>2016-02-15T01:07:36.147Z</updated>
    
    <content type="html">&lt;p&gt;欢迎来到我的博客，这是我第一篇博客。&lt;/p&gt;
&lt;p&gt;花了几天时间折腾出来了这个博客，希望自己能够坚持写下去。&lt;br&gt;自己从没有写日记的习惯，但是希望能够在这个博客记录下自己的点滴。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;life is short, use python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;python是我最近一段时间最主要的学习目标，简单优雅的设计，可以彻底抛开繁杂的语法，享受编程的成就感。没有编程基础的人学起来也都是很快的一门语言，&lt;br&gt;入门虽然很简单，如何把它变成自己的一项能力，应该还有很长一段路。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;再长的路，一步步也能走完；再短的路，不迈开双脚也无法到达。–汪国真&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎来到我的博客，这是我第一篇博客。&lt;/p&gt;
&lt;p&gt;花了几天时间折腾出来了这个博客，希望自己能够坚持写下去。&lt;br&gt;自己从没有写日记的习惯，但是希望能够在这个博客记录下自己的点滴。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;life is short, use python&lt;
    
    </summary>
    
      <category term="生活" scheme="http://songkaiape.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="杂谈" scheme="http://songkaiape.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
